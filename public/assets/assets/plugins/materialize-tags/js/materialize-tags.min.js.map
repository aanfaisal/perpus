/**
 * materialize-tags - A jQuery tags input plugin based on Materialize
 * @version v1.2.1
 * @link https://github.com/henrychavez/materialize-tags
 * @license MIT
 * @author Henry Ch√°vez <henry19.chavez@gmail.com>
 * @maintainer Jonathan Dekhtiar <contact@jonathandekhtiar.eu>
 */
{"version":3,"sources":["materialize-tags.js"],"names":["$","defaultOptions","tagClass","item","itemValue","toString","itemText","this","itemTitle","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","onTagExists","$tag","hide","fadeIn","trimValue","allowDuplicates","allowTabOnEmpty","deleteTagsOnBackspace","deleteTagsOnDeleteKey","MoveTagOnLeftArrow","MoveTagOnRightArrow","autoselect","CapitalizeFirstLetterOnly","TagsMaterialize","element","options","itemsArray","$element","objectItems","placeholderText","hasAttribute","attr","inputSize","Math","max","length","$container","$input","appendTo","$label","parent","find","before","build","on","addClass","next","focus","label","parents","hasClass","parentContainer","tags","removeClass","val","prototype","constructor","add","dontPushVal","self","trim","charAt","toUpperCase","slice","match","tagName","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","htmlEncode","data","findInputWrapper","after","blur","prop","$existingTag","filter","remove","other","beforeItemRemoveEvent","inArray","splice","siblings","first","removeAll","pop","refresh","each","contents","nodeType","nodeValue","map","typeahead","extend","makeOptionItemFunction","key","value","makeOptionFunction","typeaheadjs","typeaheadConfig","typeaheadDatasets","isArray","proxy","obj","datum","valueKey","event","removeAttr","target","$inputWrapper","which","doGetCaretPosition","prev","$prevTag","$nextTag","textLength","ceil","text","maxLengthReached","keyDownEvent","lookupList","found","index","keyCombination","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","keyCombinationInList","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","fn","materialtags","arg1","arg2","arg3","results","retVal","defaults","Constructor","propertyName","htmlEncodeContainer","html","oField","iCaretPos","document","selection","oSel","createRange","moveStart","selectionStart","window","jQuery"],"mappings":"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","file":"materialize-tags.min.js","sourcesContent":["/**\n * materialize-tags - A jQuery tags input plugin based on Materialize\n * @version v1.2.1\n * @link https://github.com/henrychavez/materialize-tags\n * @license MIT\n * @author Henry Ch√°vez <henry19.chavez@gmail.com>\n * @maintainer Jonathan Dekhtiar <contact@jonathandekhtiar.eu>\n */\n(function ($)\n{\n    \"use strict\";\n\n    var tabKey = 9,\n        enterKey = 13,\n        commaKey = 188;\n\n    /**\n    * Default Configuration\n    *\n    * @type {{tagClass: tagClass, itemValue: itemValue, itemText: itemText, itemTitle: itemTitle, freeInput: boolean, addOnBlur: boolean, maxTags: undefined, maxChars: undefined, confirmKeys: number[], onTagExists: onTagExists, trimValue: boolean, allowDuplicates: boolean}}\n    */\n    var defaultOptions = {\n        tagClass                    : tagClass,\n        itemValue                   : itemValue,\n        itemText                    : itemText,\n        itemTitle                   : itemTitle,\n        freeInput                   : true,\n        addOnBlur                   : true,\n        maxTags                     : undefined,\n        maxChars                    : undefined,\n        confirmKeys                 : [tabKey,enterKey, 44, commaKey],\n        onTagExists                 : onTagExists,\n        trimValue                   : true,\n        allowDuplicates             : false,\n        allowTabOnEmpty             : false,\n        deleteTagsOnBackspace       : true,\n        deleteTagsOnDeleteKey       : true,\n        MoveTagOnLeftArrow          : true,\n        MoveTagOnRightArrow         : true,\n        autoselect                  : false,\n        CapitalizeFirstLetterOnly   : false,\n    };\n\n\n    function tagClass(item)\n    {\n        return 'chip';\n    }\n\n    function itemValue(item)\n    {\n        return item ? item.toString() : item;\n    }\n\n    function itemText(item)\n    {\n        return this.itemValue(item);\n    }\n\n    function itemTitle(item)\n    {\n        return null;\n    }\n\n    function onTagExists(item, $tag)\n    {\n        $tag.hide().fadeIn();\n    }\n\n    function selectFirstSuggestion(){\n        $('.tt-suggestion.tt-selectable').first().addClass('tt-cursor');\n    }\n\n    /**\n    * Constructor function\n    *\n    * @param element\n    * @param options\n    * @constructor\n    */\n    function TagsMaterialize(element, options)\n    {\n        this.itemsArray = [];\n\n        this.$element = $(element);\n        this.$element.hide();\n\n        this.objectItems    = options && options.itemValue;\n        this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n        this.inputSize      = Math.max(1, this.placeholderText.length);\n\n        this.$container = $('<div class=\"materialize-tags\"></div>');\n        this.$input    = $('<input type=\"text\" class=\"n-tag\"  placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n        this.$label    = this.$element.parent().find('label');\n\n        this.$element.before(this.$container);\n        this.build(options);\n\n        this.$label.on('click', function ()\n        {\n            $(this).addClass('active');\n            $(this).addClass('infocus');\n            $(this).next('.materialize-tags').find('input.n-tag').focus();\n        });\n\n        this.$input.on('focus', function ()\n        {\n            var label = $(this).parents('.materialize-tags').parent().find('label');\n            $(this).parents('.materialize-tags').addClass('active');\n +            !label.hasClass('infocus') && label.addClass('infocus');\n\n            if (!label.hasClass('active'))\n            {\n                label.addClass('active');\n            }\n        }).on('focusout', function ()\n        {\n            var parentContainer = $(this).parents('.materialize-tags'),\n                tags            = parentContainer.find('span.chip');\n            parentContainer.removeClass('active');\n +          parentContainer.parent().find('label').removeClass('infocus');\n            // Verify if is empty and remove \"active\" class from label\n            if (tags.length == 0 && $(this).val().length == 0)\n            {\n                parentContainer.parent().find('label').removeClass('active');\n            }\n        });\n    }\n\n    TagsMaterialize.prototype = {\n        constructor : TagsMaterialize,\n\n        /**\n        * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n        * updating the elements val()\n        *\n        * @param item\n        * @param dontPushVal\n        * @param options\n        */\n        add : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\n            {\n                return;\n            }\n\n            // Ignore false values, except false\n            if (item !== false && !item)\n            {\n                return;\n            }\n\n            // Trim value\n            if (typeof item === \"string\" && self.options.trimValue)\n            {\n                item = $.trim(item);\n            }\n\n            // CapitalizeFirstLetter\n            if (typeof item === \"string\" && self.options.CapitalizeFirstLetterOnly)\n            {\n                item = item.charAt(0).toUpperCase() + item.slice(1);\n            }\n\n            // Throw an error when trying to add an object while the itemValue option was not set\n            if (typeof item === \"object\" && !self.objectItems)\n            {\n                throw(\"Can't add objects when itemValue option is not set\");\n            }\n\n            // Ignore strings only contain whitespace\n            if (item.toString().match(/^\\s*$/))\n            {\n                return;\n            }\n\n            if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT')\n            {\n                var items = item.split(',');\n                if (items.length > 1)\n                {\n                    for (var i = 0; i < items.length; i++)\n                    {\n                        this.add(items[i], true);\n                    }\n\n                    if (!dontPushVal)\n                    {\n                        self.pushVal();\n                    }\n                    return;\n                }\n            }\n\n            var itemValue = self.options.itemValue(item),\n                itemText  = self.options.itemText(item),\n                tagClass  = self.options.tagClass(item),\n                itemTitle = self.options.itemTitle(item);\n\n            // Ignore empty tags\n            if (itemText == '' || itemText == undefined){\n                return;\n            }\n\n            // Ignore items all ready added\n            var existing = $.grep(self.itemsArray, function (item) { return self.options.itemValue(item) === itemValue; })[0];\n            if (existing && !self.options.allowDuplicates)\n            {\n                // Invoke onTagExists\n                if (self.options.onTagExists)\n                {\n                    var $existingTag = $(\".tag\", self.$container).filter(function () { return $(this).data(\"item\") === existing; });\n                    self.options.onTagExists(item, $existingTag);\n                }\n                return;\n            }\n\n            // if length greater than limit\n            if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\n            {\n                return;\n            }\n\n            // raise beforeItemAdd arg\n            var beforeItemAddEvent = $.Event('beforeItemAdd', {item : item, cancel : false, options : options});\n            self.$element.trigger(beforeItemAddEvent);\n            if (beforeItemAddEvent.cancel)\n            {\n                return;\n            }\n\n            // register item in internal array and map\n            self.itemsArray.push(item);\n\n            // add a tag element\n            var $tag = $('<span class=\"' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<i class=\"material-icons\" data-role=\"remove\">close</i></span>');\n            $tag.data('item', item);\n            self.findInputWrapper().before($tag);\n            $tag.after(' ');\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Add class when reached maxTags\n            if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\n            {\n                self.$container.addClass('materialize-tags-max');\n                self.$input.blur();\n                self.$input.prop('readOnly', true);\n            }\n\n            self.$element.trigger($.Event('itemAdded', {item : item, options : options}));\n        },\n\n        /**\n        * Removes the given item. Pass true to dontPushVal to prevent updating the\n        * elements val()\n        *\n        * @param item\n        * @param dontPushVal\n        * @param options\n        */\n        remove : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.objectItems)\n            {\n                if (typeof item === \"object\")\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == self.options.itemValue(item); });\n                }\n                else\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == item; });\n                }\n\n                item = item[item.length - 1];\n            }\n\n            if (item)\n            {\n                var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\n                    item    : item,\n                    cancel  : false,\n                    options : options\n                });\n                self.$element.trigger(beforeItemRemoveEvent);\n                if (beforeItemRemoveEvent.cancel)\n                {\n                    return;\n                }\n\n                $('.chip', self.$container).filter(function () { return $(this).data('item') === item; }).remove();\n\n                if ($.inArray(item, self.itemsArray) !== -1)\n                {\n                    self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n                }\n            }\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Remove class when reached maxTags\n            if (self.options.maxTags > self.itemsArray.length)\n            {\n                self.$container.removeClass('materialize-tags-max');\n                self.$input.prop('readOnly', false);\n            }\n\n            // Remove active class when reached 0 tags\n            if (self.itemsArray.length == 0){\n                self.$input.siblings(\"label\").first().removeClass('active');\n            }\n\n            self.$input.blur();\n            self.$element.trigger($.Event('itemRemoved', {item : item, options : options}));\n        },\n\n        /**\n        * Removes all items\n        */\n        removeAll : function ()\n        {\n            var self = this;\n\n            $('.chip', self.$container).remove();\n\n            while (self.itemsArray.length > 0)\n            {\n                self.itemsArray.pop();\n            }\n\n            self.pushVal();\n            self.$container.removeClass('materialize-tags-max');\n            self.$input.siblings(\"label\").first().removeClass('active');\n            self.$input.prop('readOnly', false);\n            self.$input.blur();\n        },\n\n        /**\n        * Refreshes the tags so they match the text/value of their corresponding\n        * item.\n        */\n        refresh : function ()\n        {\n            var self = this;\n            $('.chip', self.$container).each(function ()\n            {\n                var $tag        = $(this),\n                    item        = $tag.data('item'),\n                    itemValue   = self.options.itemValue(item),\n                    itemText    = self.options.itemText(item),\n                    tagClass    = self.options.tagClass(item);\n\n                // Update tag's class and inner text\n                $tag.attr('class', null);\n                $tag.addClass('tag ' + htmlEncode(tagClass));\n                $tag.contents().filter(function ()\n                {\n                    return this.nodeType == 3;\n                })[0].nodeValue = htmlEncode(itemText);\n\n            });\n        },\n\n        /**\n        * Returns the items added as tags\n        */\n        items : function ()\n        {\n            return this.itemsArray;\n        },\n\n        /**\n        * Assembly value by retrieving the value of each item, and set it on the\n        * element.\n        */\n        pushVal : function ()\n        {\n            var self = this,\n                val  = $.map(self.items(), function (item)\n                {\n                    return self.options.itemValue(item).toString();\n                });\n\n            self.$element.val(val, true).trigger('change');\n            self.$input.typeahead('val', '');\n        },\n\n        /**\n        * Initializes the tags input behaviour on the element\n        *\n        * @param options\n        */\n        build : function (options)\n        {\n            var self = this;\n\n            self.options = $.extend({}, defaultOptions, options);\n            // When itemValue is set, freeInput should always be false\n\n            if (self.objectItems)\n            {\n                if (self.options.freeInput === true)\n                {\n                    self.options.freeInput = true;\n                }\n                else{\n                    self.options.freeInput = false\n                }\n            }\n\n            makeOptionItemFunction(self.options, 'itemValue');\n            makeOptionItemFunction(self.options, 'itemText');\n            makeOptionFunction(self.options, 'tagClass');\n\n            // Typeahead.js\n            if (self.options.typeaheadjs)\n            {\n                var typeaheadConfig   = null;\n                var typeaheadDatasets = {};\n\n                // Determine if main configurations were passed or simply a dataset\n                var typeaheadjs = self.options.typeaheadjs;\n                if ($.isArray(typeaheadjs))\n                {\n                    typeaheadConfig   = typeaheadjs[0];\n                    typeaheadDatasets = typeaheadjs[1];\n                }\n                else\n                {\n                    typeaheadDatasets = typeaheadjs;\n                }\n\n                self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum)\n                {\n                    if (typeaheadDatasets.valueKey)\n                    {\n                        self.add(datum[typeaheadDatasets.valueKey]);\n                    }\n                    else\n                    {\n                        self.add(datum);\n                    }\n                    self.$input.typeahead('val', '');\n                }, self));\n            }\n\n            self.$container.on('click', $.proxy(function (event)\n            {\n                if (!self.$element.attr('disabled'))\n                {\n                    self.$input.removeAttr('disabled');\n                }\n                self.$input.focus();\n            }, self));\n\n            if (self.options.addOnBlur && self.options.freeInput)\n            {\n                self.$input.on('focusout', $.proxy(function (event)\n                {\n                    self.add(self.$input.val());\n                    self.$input.val('');\n\n                }, self));\n            }\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input        = $(event.target),\n                    $inputWrapper = self.findInputWrapper();\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                switch (event.which)\n                {\n                    // BACKSPACE\n                    case 8:\n                        if (self.options.deleteTagsOnBackspace && doGetCaretPosition($input[0]) === 0)\n                        {\n                            var prev = $inputWrapper.prev();\n                            if (prev)\n                            {\n                                self.remove(prev.data('item'));\n                            }\n                        }\n                        break;\n\n                    // DELETE\n                    case 46:\n                        if (self.options.deleteTagsOnDeleteKey && doGetCaretPosition($input[0]) === 0)\n                        {\n                            var next = $inputWrapper.next();\n                            if (next)\n                            {\n                                self.remove(next.data('item'));\n                            }\n                        }\n                        break;\n\n                    // LEFT ARROW\n                    case 37:\n                        // Try to move the input before the previous tag\n                        var $prevTag = $inputWrapper.prev();\n                        if (self.options.MoveTagOnLeftArrow && $input.val().length === 0 && $prevTag[0])\n                        {\n                            $prevTag.before($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    // RIGHT ARROW\n                    case 39:\n                        // Try to move the input after the next tag\n                        var $nextTag = $inputWrapper.next();\n                        if (self.options.MoveTagOnRightArrow && $input.val().length === 0 && $nextTag[0])\n                        {\n                            $nextTag.after($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    default:\n                    // ignore\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input = $(event.target);\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                var text             = $input.val(),\n                    maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n\n                // If not text is entered and tab event is fired shouldn't prevent the default behavior\n                if (self.options.allowTabOnEmpty && isEmpty(text) && event.which === tabKey) \n                {\n                    return;\n                }\n\n                if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached))\n                {\n                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n                    $input.val('');\n                    (self.$input.typeahead) && self.$input.typeahead(\"val\",\"\");\n                    event.preventDefault();\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size      = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            // Remove icon clicked\n            self.$container.on('click', '[data-role=remove]', $.proxy(function (event)\n            {\n                if (self.$element.attr('disabled'))\n                {\n                    return;\n                }\n                self.remove($(event.target).closest('.chip').data('item'));\n            }, self));\n\n            // Only add existing value as tags when using strings as tags\n            if (self.options.itemValue === defaultOptions.itemValue)\n            {\n                if (self.$element[0].tagName === 'INPUT')\n                {\n                    self.add(self.$element.val());\n                }\n            }\n        },\n\n        /**\n        * Removes all materialtags behaviour and unregsiter all event handlers\n        */\n        destroy : function ()\n        {\n            var self = this;\n\n            // Unbind events\n            self.$container.off('keydown', 'input');\n            self.$container.off('click', '[role=remove]');\n\n            self.$container.remove();\n            self.$element.removeData('materialtags');\n            self.$element.show();\n        },\n\n        /**\n        * Sets focus on the materialtags\n        */\n        focus : function ()\n        {\n            this.$input.focus();\n        },\n\n        /**\n        * Returns the internal input element\n        */\n        input : function ()\n        {\n            return this.$input;\n        },\n\n        /**\n        * Returns the element which is wrapped around the internal input. This\n        * is normally the $container, but typeahead.js moves the $input element.\n        */\n        findInputWrapper : function ()\n        {\n            var elt      = this.$input[0],\n                container = this.$container[0];\n            while (elt && elt.parentNode !== container)\n            {\n                elt = elt.parentNode;\n            }\n\n            return $(elt);\n        }\n    };\n\n    /**\n    * Register JQuery plugin\n    *\n    * @param arg1\n    * @param arg2\n    * @param arg3\n    * @returns {Array}\n    */\n    $.fn.materialtags = function (arg1, arg2, arg3)\n    {\n        var results = [];\n\n        this.each(function ()\n        {\n            var materialtags = $(this).data('materialtags');\n            // Initialize a new material tags input\n            if (!materialtags)\n            {\n                materialtags = new TagsMaterialize(this, arg1);\n                $(this).data('materialtags', materialtags);\n                results.push(materialtags);\n\n                // Init tags from $(this).val()\n                $(this).val($(this).val());\n            }\n            else if (!arg1 && !arg2)\n            {\n                // materialtags already exists\n                // no function, trying to init\n                results.push(materialtags);\n            }\n            else if (materialtags[arg1] !== undefined)\n            {\n                // Invoke function on existing tags input\n                if (materialtags[arg1].length === 3 && arg3 !== undefined)\n                {\n                    var retVal = materialtags[arg1](arg2, null, arg3);\n                }\n                else\n                {\n                    var retVal = materialtags[arg1](arg2);\n                }\n                if (retVal !== undefined)\n                {\n                    results.push(retVal);\n                }\n            }\n        });\n\n        if (typeof arg1 == 'string')\n        {\n            // Return the results from the invoked function calls\n            return results.length > 1 ? results : results[0];\n        }\n        else\n        {\n            return results;\n        }\n    };\n\n    $.fn.materialtags.defaults = defaultOptions;\n    $.fn.materialtags.Constructor = TagsMaterialize;\n\n    /**\n    * Most options support both a string or number as well as a function as\n    * option value. This function makes sure that the option with the given\n    * key in the given options is wrapped in a function\n    *\n    * @param options\n    * @param key\n    */\n    function makeOptionItemFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var propertyName = options[key];\n            options[key]    = function (item) { return item[propertyName]; };\n        }\n    }\n\n    function makeOptionFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var value    = options[key];\n            options[key] = function () { return value; };\n        }\n    }\n\n    /**\n    * HtmlEncodes the given value\n    */\n    var htmlEncodeContainer = $('<div />');\n\n    function htmlEncode(value)\n    {\n        if (value)\n        {\n            return htmlEncodeContainer.text(value).html();\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n    /**\n    * Returns the position of the caret in the given input field\n    * http://flightschool.acylt.com/devnotes/caret-position-woes/\n    *\n    * @param oField\n    * @returns {number}\n    */\n    function doGetCaretPosition(oField)\n    {\n        var iCaretPos = 0;\n        if (document.selection)\n        {\n            oField.focus();\n            var oSel  = document.selection.createRange();\n            oSel.moveStart('character', -oField.value.length);\n            iCaretPos = oSel.text.length;\n        }\n        else if (oField.selectionStart || oField.selectionStart == '0')\n        {\n            iCaretPos = oField.selectionStart;\n        }\n        return (iCaretPos);\n    }\n\n    /**\n    * Returns boolean indicates whether user has pressed an expected key combination.\n    * http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n    * [13, {which: 188, shiftKey: true}]\n    *\n    * @param keyDownEvent\n    * @param lookupList\n    * @returns {boolean}\n    */\n    function keyCombinationInList(keyDownEvent, lookupList)\n    {\n        var found = false;\n        $.each(lookupList, function (index, keyCombination)\n        {\n            if (typeof (keyCombination) === 'number' && keyDownEvent.which === keyCombination)\n            {\n                found = true;\n                return false;\n            }\n\n            if (keyDownEvent.which === keyCombination.which)\n            {\n                var alt   = !keyCombination.hasOwnProperty('altKey') || keyDownEvent.altKey === keyCombination.altKey,\n                    shift = !keyCombination.hasOwnProperty('shiftKey') || keyDownEvent.shiftKey === keyCombination.shiftKey,\n                    ctrl  = !keyCombination.hasOwnProperty('ctrlKey') || keyDownEvent.ctrlKey === keyCombination.ctrlKey;\n                if (alt && shift && ctrl)\n                {\n                    found = true;\n                    return false;\n                }\n            }\n        });\n\n        return found;\n    }\n\n    /**\n    * Return if a text is empty\n    *\n    * @param text\n    * @returns {boolean}\n    */\n    function isEmpty(text) {\n        return text.length === 0;\n    }\n\n    /**\n    * Initialize materialtags behaviour on inputs which have\n    * data-role=materialtags\n    */\n    $(function ()\n    {\n        $(\"input[data-role=materialtags]\").materialtags();\n    });\n})(window.jQuery);\n"]}